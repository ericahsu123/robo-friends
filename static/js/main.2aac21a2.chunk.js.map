{"version":3,"sources":["actions/types.js","reducers/index.js","reducers/robotsReducer.js","reducers/queryReducer.js","components/Card.jsx","components/utils/filterArrayOfObjects.js","components/CardList.jsx","components/Heading.jsx","components/SearchBox.jsx","actions/index.js","components/NavBar.jsx","components/Loading.jsx","components/MainPage.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["combineReducers","robots","state","error","action","type","types","payload","query","Card","props","useState","likesCount","setLikesCount","className","src","name","alt","style","backgroundColor","email","onClick","prevLikesCount","data-testid","filterArrayOfObjects","array","field","filterString","filter","item","toLowerCase","includes","connect","searchRobots","map","robot","key","id","Heading","changeSearchString","searchString","aria-label","placeholder","onChange","event","target","value","NavBar","Loading","MainPage","useEffect","fetchRobots","marginTop","length","url","dispatch","a","axios","get","response","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4OAAe,EACS,uBADT,EAEO,qBAFP,EAGS,uBCCTA,cAAgB,CAAEC,OCFlB,WAAkD,IAAjDC,EAAgD,uDAAxC,CAAED,OAAQ,GAAIE,MAAO,MAAQC,EAAW,uCAC9D,OAAQA,EAAOC,MACb,KAAKC,EAEL,KAAKA,EACH,OAAO,2BAAKJ,GAAUE,EAAOG,SAC/B,QACE,OAAOL,IDL2CM,MEFzC,WAAyB,IAAxBN,EAAuB,uDAAf,GAAIE,EAAW,uCACrC,OAAQA,EAAOC,MACb,KAAKC,EACH,OAAOF,EAAOG,QAChB,QACE,OAAOL,M,iDCiCEO,EAtCF,SAACC,GAAW,IAAD,EACcC,mBAAS,GADvB,mBACfC,EADe,KACHC,EADG,KAWtB,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,SACb,yBACEC,IAAG,+BAA0BL,EAAMM,KAAhC,mBACHC,IAAI,QACJC,MAAO,CAAEC,gBAAiB,yBAG9B,yBAAKL,UAAU,WACb,yBAAKA,UAAU,yBAAyBJ,EAAMM,MAC9C,yBAAKF,UAAU,8BAA8BJ,EAAMU,OACnD,0BAAMN,UAAU,iBACd,uBACEA,UAAU,yBACVO,QAvBe,WACvBR,GAAc,SAACS,GACb,OAAIA,EAAiB,EACZA,EAAiB,EAEnBA,MAmBDC,cAAY,cAEd,0BAAMA,cAAY,eAAeX,GACjC,mCACA,2CC3BKY,EANc,SAACC,EAAOC,EAAOC,GAC1C,OAAOF,EAAMG,QAAO,SAACC,GACnB,OAAOA,EAAKH,GAAOI,cAAcC,SAASJ,EAAaG,mBCoB5CE,eAJS,SAAC9B,GACvB,MAAO,CAAED,OAAQC,EAAMD,OAAOA,OAAQO,MAAON,EAAMM,SAGtCwB,EAhBE,SAACtB,GAChB,IAAMuB,EAAeT,EAAqBd,EAAMT,OAAQ,OAAQS,EAAMF,OAEtE,OACE,yBAAKM,UAAU,YACZmB,EAAaC,KAAI,SAACC,GACjB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAME,GAAIrB,KAAMmB,EAAMnB,KAAMI,MAAOe,EAAMf,eCFpDkB,EARC,WACd,OACE,yBAAKxB,UAAU,QACb,6CC2BSkB,eANS,SAAC9B,GACvB,MAAO,CACLM,MAAON,EAAMM,SAIuB,CAAE+B,mBCZR,SAACC,GACjC,MAAO,CACLnC,KAAMC,EACNC,QAASiC,KDSER,EA3BG,SAACtB,GAIjB,OACE,yBAAKI,UAAU,cACb,yBAAKA,UAAU,iBACb,2BACES,cAAY,eACZkB,aAAW,gBACXpC,KAAK,OACLqC,YAAY,mBACZC,SAXa,SAACC,GACpBlC,EAAM6B,mBAAmBK,EAAMC,OAAOC,QAWhCA,MAAOpC,EAAMF,QAEf,uBAAGM,UAAU,qBEPNiC,EATA,WACb,OACE,yBAAKjC,UAAU,oCACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCISkC,EAVC,WACd,OACE,6BACE,yBAAKlC,UAAU,6BACb,yBAAKA,UAAU,kBAAf,cC0BOmC,G,MAzBE,SAACvC,GAChBwC,qBAAU,WACRxC,EAAMyC,YAAY,gDAEjB,IAaH,OACE,yBAAKrC,UAAU,+BACb,kBAAC,EAAD,MACA,yBAAKI,MAAO,CAAEkC,UAAW,UAbC,IAAxB1C,EAAMT,OAAOoD,OACX3C,EAAMP,MACD,yDAEA,kBAAC,EAAD,MAGF,kBAAC,EAAD,UCPE6B,eAJS,SAAC9B,GACvB,MAAO,CAAED,OAAQC,EAAMD,OAAOA,OAAQE,MAAOD,EAAMD,OAAOE,SAGpB,CAAEgD,YJXf,SAACG,GAC1B,8CAAO,WAAOC,GAAP,eAAAC,EAAA,+EAEoBC,IAAMC,IAAIJ,GAF9B,OAEGK,EAFH,OAGHJ,EAAS,CACPlD,KAAMC,EACNC,QAAS,CAAEN,OAAQ0D,EAASC,QAL3B,gDAQHL,EAAS,CACPlD,KAAMC,EACNC,QAAS,CAAEJ,MAAM,EAAD,MAVf,yDAAP,wDIUa6B,EARH,SAACtB,GACX,OAAO,kBAAC,EAAaA,MCKjBmD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1E,QACfoE,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAjF,GACL6E,QAAQ7E,MAAM,4CAA6CA,MCtFjE,IAAMkF,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDMnB,SAAkBxB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwB,IAAIC,gBAAwBhC,OAAOC,SAASgC,MACpDC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM2B,gBAAN,sBAEPlC,IAgEV,SAAiCO,EAAOC,GAEtC8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B3B,MAAK,SAAAd,GAEJ,IAAM0C,EAAc1C,EAASyC,QAAQ1C,IAAI,gBAEnB,MAApBC,EAAS2C,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC5B/BE,K","file":"static/js/main.2aac21a2.chunk.js","sourcesContent":["export default {\n  FETCH_ROBOTS_SUCCESS: 'FETCH_ROBOTS_SUCCESS',\n  FETCH_ROBOTS_ERROR: 'FETCH_ROBOTS_ERROR',\n  CHANGE_SEARCH_STRING: 'CHANGE_SEARCH_STRING',\n};\n","import { combineReducers } from 'redux';\nimport robotsReducer from './robotsReducer';\nimport queryReducer from './queryReducer';\n\nexport default combineReducers({ robots: robotsReducer, query: queryReducer });\n","import types from '../actions/types';\n\nexport default (state = { robots: [], error: null }, action) => {\n  switch (action.type) {\n    case types.FETCH_ROBOTS_SUCCESS:\n      return { ...state, ...action.payload };\n    case types.FETCH_ROBOTS_ERROR:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n","import types from '../actions/types';\n\nexport default (state = '', action) => {\n  switch (action.type) {\n    case types.CHANGE_SEARCH_STRING:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import React, { useState } from 'react';\n\nconst Card = (props) => {\n  const [likesCount, setLikesCount] = useState(0);\n\n  const onIncrementLikes = () => {\n    setLikesCount((prevLikesCount) => {\n      if (prevLikesCount < 5) {\n        return prevLikesCount + 1;\n      }\n      return prevLikesCount;\n    });\n  };\n  return (\n    <div className=\"ui centered card\">\n      <div className=\"image\">\n        <img\n          src={`https://robohash.org/${props.name}.png?bgset=bg1 `}\n          alt=\"robot\"\n          style={{ backgroundColor: 'rgb(185, 226, 224)' }}\n        />\n      </div>\n      <div className=\"content\">\n        <div className=\"center aligned header\">{props.name}</div>\n        <div className=\"center aligned description\">{props.email}</div>\n        <span className=\"right floated\">\n          <i\n            className=\"star outline like icon\"\n            onClick={onIncrementLikes}\n            data-testid=\"add-count\"\n          ></i>\n          <span data-testid=\"likes-count\">{likesCount}</span>\n          <span> </span>\n          <span>stars</span>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","const filterArrayOfObjects = (array, field, filterString) => {\n  return array.filter((item) => {\n    return item[field].toLowerCase().includes(filterString.toLowerCase());\n  });\n};\n\nexport default filterArrayOfObjects;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Card from './Card';\nimport filterArrayOfObjects from './utils/filterArrayOfObjects';\n\nconst CardList = (props) => {\n  const searchRobots = filterArrayOfObjects(props.robots, 'name', props.query);\n\n  return (\n    <div className=\"ui cards\">\n      {searchRobots.map((robot) => {\n        return <Card key={robot.id} name={robot.name} email={robot.email} />;\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { robots: state.robots.robots, query: state.query };\n};\n\nexport default connect(mapStateToProps)(CardList);\n","import React from 'react';\n\nconst Heading = () => {\n  return (\n    <div className=\"item\">\n      <h1>RoboFriends</h1>\n    </div>\n  );\n};\n\nexport default Heading;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { changeSearchString } from '../actions';\n\nconst SearchBox = (props) => {\n  const handleChange = (event) => {\n    props.changeSearchString(event.target.value);\n  };\n  return (\n    <div className=\"right item\">\n      <div className=\"ui icon input\">\n        <input\n          data-testid=\"search-input\"\n          aria-label=\"Search Robots\"\n          type=\"text\"\n          placeholder=\"Search robots...\"\n          onChange={handleChange}\n          value={props.query}\n        />\n        <i className=\"search icon\"></i>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    query: state.query,\n  };\n};\n\nexport default connect(mapStateToProps, { changeSearchString })(SearchBox);\n","import axios from 'axios';\nimport types from './types';\n\nexport const fetchRobots = (url) => {\n  return async (dispatch) => {\n    try {\n      const response = await axios.get(url);\n      dispatch({\n        type: types.FETCH_ROBOTS_SUCCESS,\n        payload: { robots: response.data },\n      });\n    } catch (error) {\n      dispatch({\n        type: types.FETCH_ROBOTS_ERROR,\n        payload: { error: error },\n      });\n    }\n  };\n};\n\nexport const changeSearchString = (searchString) => {\n  return {\n    type: types.CHANGE_SEARCH_STRING,\n    payload: searchString,\n  };\n};\n","import React from 'react';\nimport Heading from './Heading';\nimport SearchBox from './SearchBox';\n\nconst NavBar = () => {\n  return (\n    <div className=\"ui top fixed huge stackable menu\">\n      <Heading />\n      <SearchBox />\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\n\nconst Loading = () => {\n  return (\n    <div>\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui text loader\">Loading</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useEffect } from 'react';\n\nimport CardList from './CardList';\nimport NavBar from './NavBar';\nimport Loading from './Loading';\nimport './styles.css';\n\nconst MainPage = (props) => {\n  useEffect(() => {\n    props.fetchRobots('https://jsonplaceholder.typicode.com/users');\n    // eslint-disable-next-line\n  }, []);\n\n  const renderRobots = () => {\n    if (props.robots.length === 0) {\n      if (props.error) {\n        return <h2>Error in fetching robots!</h2>;\n      } else {\n        return <Loading />;\n      }\n    } else {\n      return <CardList />;\n    }\n  };\n  return (\n    <div className=\"ui container center aligned\">\n      <NavBar />\n      <div style={{ marginTop: '120px' }}>{renderRobots()}</div>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchRobots } from '../actions';\nimport MainPage from './MainPage';\n\nconst App = (props) => {\n  return <MainPage {...props} />;\n};\n\nconst mapStateToProps = (state) => {\n  return { robots: state.robots.robots, error: state.robots.error };\n};\n\nexport default connect(mapStateToProps, { fetchRobots })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport reducers from './reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}