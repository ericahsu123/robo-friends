{"version":3,"sources":["actions/types.js","reducers/index.js","reducers/robotsReducer.js","reducers/queryReducer.js","components/Card.jsx","components/CardList.jsx","components/Heading.jsx","components/SearchBox.jsx","actions/index.js","components/NavBar.jsx","components/Loading.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["combineReducers","robots","state","action","type","types","payload","query","Card","props","className","src","name","alt","style","backgroundColor","email","connect","searchRobots","filter","robot","toLowerCase","includes","map","key","id","Heading","changeSearchString","searchString","placeholder","onChange","event","target","value","NavBar","Loading","fetchRobots","dispatch","a","axios","get","response","data","useEffect","marginTop","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.baa9b745.chunk.js","sourcesContent":["export default {\n  FETCH_ROBOTS: 'FETCH_ROBOTS',\n  CHANGE_SEARCH_STRING: 'CHANGE_SEARCH_STRING',\n};\n","import { combineReducers } from 'redux';\nimport robotsReducer from './robotsReducer';\nimport queryReducer from './queryReducer';\n\nexport default combineReducers({ robots: robotsReducer, query: queryReducer });\n","import types from '../actions/types';\n\nexport default (state = [], action) => {\n  switch (action.type) {\n    case types.FETCH_ROBOTS:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","import types from '../actions/types';\n\nexport default (state = '', action) => {\n  switch (action.type) {\n    case types.CHANGE_SEARCH_STRING:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import React from 'react';\n\nconst Card = (props) => {\n  return (\n    <div className=\"ui centered card\">\n      <div className=\"image\">\n        <img\n          src={`https://robohash.org/${props.name}.png`}\n          alt=\"robot\"\n          style={{ backgroundColor: 'rgb(185, 226, 224)' }}\n        />\n      </div>\n      <div className=\"content\">\n        <div className=\"center aligned header\">{props.name}</div>\n        <div className=\"center aligned description\">{props.email}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Card from './Card';\n\nconst CardList = (props) => {\n  const searchRobots = props.robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(props.query.toLowerCase());\n  });\n\n  return (\n    <div className=\"ui cards\">\n      {searchRobots.map((robot) => {\n        return <Card key={robot.id} name={robot.name} email={robot.email} />;\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { robots: state.robots, query: state.query };\n};\n\nexport default connect(mapStateToProps)(CardList);\n","import React from 'react';\n\nconst Heading = () => {\n  return (\n    <div className=\"item\">\n      <h1>RoboFriends</h1>\n    </div>\n  );\n};\n\nexport default Heading;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { changeSearchString } from '../actions';\n\nconst SearchBox = (props) => {\n  const handleChange = (event) => {\n    props.changeSearchString(event.target.value);\n  };\n  return (\n    <div className=\"right item\">\n      <div className=\"ui icon input\">\n        <input\n          type=\"text\"\n          placeholder=\"Search robots...\"\n          onChange={handleChange}\n          value={props.query}\n        />\n        <i className=\"search icon\"></i>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    query: state.query,\n  };\n};\n\nexport default connect(mapStateToProps, { changeSearchString })(SearchBox);\n","import axios from 'axios';\nimport types from './types';\n\nexport const fetchRobots = () => {\n  return async (dispatch) => {\n    const response = await axios.get(\n      'https://jsonplaceholder.typicode.com/users'\n    );\n    dispatch({\n      type: types.FETCH_ROBOTS,\n      payload: response.data,\n    });\n  };\n};\n\nexport const changeSearchString = (searchString) => {\n  return {\n    type: types.CHANGE_SEARCH_STRING,\n    payload: searchString,\n  };\n};\n","import React from 'react';\nimport Heading from './Heading';\nimport SearchBox from './SearchBox';\n\nconst NavBar = () => {\n  return (\n    <div className=\"ui top fixed huge stackable menu\">\n      <Heading />\n      <SearchBox />\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\n\nconst Loading = () => {\n  return (\n    <div>\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui text loader\">Loading</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from './CardList';\nimport NavBar from './NavBar';\nimport Loading from './Loading';\nimport './styles.css';\nimport { fetchRobots } from '../actions';\n\nconst App = (props) => {\n  useEffect(() => {\n    props.fetchRobots();\n    // eslint-disable-next-line\n  }, []);\n  // console.log('query', query);\n  // console.log('robots', robots);\n\n  return (\n    <div className=\"ui container center aligned\">\n      <NavBar />\n      <div style={{ marginTop: '120px' }}>\n        {props.robots.length === 0 ? <Loading /> : <CardList />}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { robots: state.robots };\n};\n\nexport default connect(mapStateToProps, { fetchRobots })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport reducers from './reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}